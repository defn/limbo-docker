#!/usr/bin/env bash

function vagrant {
  (unset VAGRANT_DEFAULT_PROVIDER; limbo vagrant ssh -- "$@")
}

function lxc {
  limbo lxc "$@"
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  local nm_lxd=
  local net_lxd=

  local nm_docker=
  local net_docker=

  local nm_snapshot=
  local nm_snapshot_lvm=

  nm_lxd="$1"; shift
  net_lxd="$1"; shift

  if [[ "$#" -ge 2 ]]; then
    nm_docker="$1"; shift
    net_docker="$1"; shift
  fi

  if [[ -n "${1:-}" ]]; then
    nm_snapshot="$1"; shift
  fi

  if [[ -n "${1:-}" ]]; then
    nm_snapshot_lvm="$1"; shift
  else
    nm_snapshot_lvm="$nm_snapshot"
  fi

  set -x

  lxc profile create limbo 2>/dev/null || true
  lxc profile set limbo user.user-data - < "$shome/cidata/user-data"

  if [[ -z "$nm_snapshot" ]]; then
    lxc launch xenial "${nm_lxd}" -p default -p docker -p limbo -c boot.autostart=true 2>/dev/null || true
    while [[ "$(echo | lxc exec "${nm_lxd}" -- systemctl is-active network-online.target)" != "active" ]]; do sleep 2; done

    lxc exec "${nm_lxd}" -- touch /root/.cloud-init.hostname
    while true; do
      case "$(echo | lxc exec "${nm_lxd}" -- systemctl is-active cloud-final.service)" in
        active|failed) break ;;
        *) sleep 2 ;;
      esac
    done

    for a in 1 2; do
      lxc exec "${nm_lxd}" -- rm -f /var/lib/cloud/instance
      lxc exec "${nm_lxd}" -- cloud-init init
    done

		lxc exec "${nm_lxd}" -- service lxd stop 2>/dev/null || true

		cat <<EOF | lxc exec "${nm_lxd}" -- tee /etc/default/lxd-bridge
USE_LXD_BRIDGE="false"
LXD_BRIDGE="lxdbr0"
UPDATE_PROFILE="false"
LXD_CONFILE=""
LXD_DOMAIN="lxd"
LXD_IPV4_ADDR=""
LXD_IPV4_NETMASK=""
LXD_IPV4_NETWORK=""
LXD_IPV4_DHCP_RANGE=""
LXD_IPV4_DHCP_MAX=""
LXD_IPV4_NAT="true"
LXD_IPV6_ADDR=""
LXD_IPV6_MASK=""
LXD_IPV6_NETWORK=""
LXD_IPV6_NAT="false"
LXD_IPV6_PROXY="false"
EOF

		cat <<EOF | lxc exec "${nm_lxd}" -- tee /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
network: {config: disabled}
EOF

		cat <<EOF | lxc exec "${nm_lxd}" -- tee /etc/network/interfaces.d/50-cloud-init.cfg
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
  up sleep 5
  up fanctl up -o 250.0.0.0/8 -u eth0/16 --dhcp
EOF

  	lxc exec "${nm_lxd}" -- service lxd start
  	lxc exec "${nm_lxd}" -- service lxd restart
  	lxc exec "${nm_lxd}" -- systemctl enable lxd.service

    {
      echo "Acquire::http::Proxy \"http://$CACHE_VIP:3128\";" 
      echo 'Acquire::Languages "none";'
    } > ".99boxcache.$$" 
    lxc file push ".99boxcache.$$" "${nm_lxd}"/etc/apt/apt.conf.d/99boxcache
    rm -f ".99boxcache.$$"

    if [[ -n "$nm_docker" ]]; then
      vagrant sudo lvcreate -V100G -T -n "${nm_lxd}" inception/docker || true
      vagrant sudo mkdir -p "/mnt/${nm_lxd}"
      if vagrant sudo mkfs.ext4 "/dev/inception/${nm_lxd}"; then
        vagrant sudo mount "/dev/inception/${nm_lxd}" "/mnt/${nm_lxd}"
        vagrant sudo chown -R 165536:165536 "/mnt/${nm_lxd}"
        vagrant sudo umount "/mnt/${nm_lxd}"
      fi

      lxc exec "${nm_lxd}" -- mkdir -p /var/lib/docker
      lxc config device add "${nm_lxd}" docker disk source="/dev/inception/${nm_lxd}"  path=/var/lib/docker 2>/dev/null || true
      lxc restart "${nm_lxd}"
      while [[ "$(echo | lxc exec "${nm_lxd}" -- systemctl is-active network-online.target)" != "active" ]]; do sleep 2; done


      echo "DOCKER_OPTS='-H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock -s overlay'" > ".docker.$$"
      lxc file push ".docker.$$" "${nm_lxd}"/etc/default/docker
      rm -f ".docker.$$"

      lxc exec "${nm_lxd}" -- ping -c 10 8.8.8.8
      lxc exec "${nm_lxd}" -- add-apt-repository -y --massive-debug ppa:ubuntu-lxc/lxd-stable
      lxc exec "${nm_lxd}" -- apt update
      lxc exec "${nm_lxd}" -- env DEBIAN_FRONTEND=noninteractive apt -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y docker.io lxd zfsutils criu lxd-tools
      lxc exec "${nm_lxd}" -- service docker stop || true
      lxc exec "${nm_lxd}" -- service docker start

      lxc exec "${nm_lxd}" -- lxc image copy ubuntu:16.04 local: --alias xenial
      lxc exec "${nm_lxd}" -- docker pull ubuntu:xenial

      lxc exec "${nm_lxd}" -- usermod -aG lxd ubuntu
      lxc exec "${nm_lxd}" -- usermod -aG docker ubuntu
    fi

    limbo network init
  else
    if ! lxc copy "$nm_snapshot" "${nm_lxd}"; then
      lxc stop "${nm_lxd}"
    fi
    vagrant sudo lvcreate -s -n "${nm_lxd}" "$nm_snapshot_lvm"
    lxc config device remove "${nm_lxd}" docker
    lxc config device add "${nm_lxd}" docker disk source="/dev/inception/${nm_lxd}"  path=/var/lib/docker 2>/dev/null || true
    lxc start "${nm_lxd}"
    while [[ "$(echo | lxc exec "${nm_lxd}" -- systemctl is-active network-online.target)" != "active" ]]; do sleep 2; done
  fi

  lxc exec "${nm_lxd}" -- lxc profile set default security.nesting true
  lxc exec "${nm_lxd}" -- lxc profile set default security.privileged true
	lxc exec "${nm_lxd}" -- lxc profile device set default eth0 parent fan-250
	lxc exec "${nm_lxd}" -- lxc profile device set default eth0 mtu 1498

	lxc exec "${nm_lxd}" -- touch /root/.cloud-init.hostname
  while true; do
    case "$(echo | lxc exec "${nm_lxd}" -- systemctl is-active cloud-final.service)" in
      active|failed) break ;;
      *) sleep 2 ;;
    esac
  done

  for a in 1 2; do
    lxc exec "${nm_lxd}" -- rm -f /var/lib/cloud/instance
    lxc exec "${nm_lxd}" -- cloud-init init
  done

	lxc stop "${nm_lxd}"
  lxc start "${nm_lxd}" || (sleep 5; lxc start "${nm_lxd}")
  while [[ "$(echo | lxc exec "${nm_lxd}" -- systemctl is-active network-online.target)" != "active" ]]; do sleep 2; done

  local ip_lxd="$(lxc list "${nm_lxd}" --format json | jq -r '.[].state.network.eth0.addresses[] | select(.family == "inet").address')"
  ssh-keygen -R "$ip_lxd"

  if [[ -n "$nm_docker" ]]; then
    lxc list --format json \
      | jq -r '.[] | .state.network.eth0.addresses[] | select(.scope == "global") | .address' \
      | while read -r a; do 
          vagrant sudo ip route replace "250.$(echo $a | cut -d. -f3-4).0/24" via "$a"
        done

    lxc exec "${nm_lxd}" -- rm -f /etc/docker/key.json
    docker machine rm -f "$nm_docker" 2>/dev/null || true
    docker machine create --driver generic --generic-ip-address "$ip_lxd" --generic-ssh-user ubuntu \
      --engine-install-url="" \
      --engine-opt="bip=${net_docker}.1/24" \
      --engine-storage-driver="overlay" \
      --engine-opt="insecure-registry=172.28.128.1:5000" \
      --engine-opt="insecure-registry=172.28.128.1:5001" \
      "$nm_docker"
  fi

  if [[ -z "${nm_snapshot}"  && "${nm_lxd}" == "defn" ]]; then
    vagrant sudo ip route replace "${net_docker}.0/24" via "$ip_lxd"

    ssh -A -o StrictHostKeyChecking=no "ubuntu@${ip_lxd}" ssh -o StrictHostKeyChecking=no git@github.com true 2>/dev/null || true

    if ! ssh "ubuntu@${ip_lxd}" ls -d .git 2>/dev/null; then
      ssh -A "ubuntu@${ip_lxd}" git clone git@github.com:defn/home
      ssh "ubuntu@${ip_lxd}" mv home/.git .
      ssh "ubuntu@${ip_lxd}" git reset --hard
      ssh "ubuntu@${ip_lxd}" rm -rf home .profile
      ssh -A "ubuntu@${ip_lxd}" make
    fi
  fi
}

source sub "$BASH_SOURCE" "$@"
